def preprocess_and_run(option):
    # Preprocessing and running the corresponding model based on the selected option
    if option == 1:
        # Code for dataset 1 preprocessing and model execution
        print("Processing Dataset 1...")
        # Add your dataset 1 preprocessing code here
        # For example:
        # df = pd.read_csv("dataset1.csv")
        # Preprocessing steps...

        # Running the model
        print("Running the model for Dataset 1...")
        # Add your model execution code here
        # For example:
        # result = model1.predict(df)
        # Save result to a file
        with open("result1.txt", "w") as f:
            f.write("Results for Dataset 1")

    elif option == 2:
        # Code for dataset 2 preprocessing and model execution
        print("Processing Dataset 2...")
        # Add your dataset 2 preprocessing code here

        print("Running the model for Dataset 2...")
        # Add your model execution code here
        with open("result2.txt", "w") as f:
            f.write("Results for Dataset 2")

    elif option == 3:
        # Code for dataset 3 preprocessing and model execution
        print("Processing Dataset 3...")
        # Add your dataset 3 preprocessing code here

        print("Running the model for Dataset 3...")
        with open("result3.txt", "w") as f:
            f.write("Results for Dataset 3")

    elif option == 4:
        # Code for dataset 4 preprocessing and model execution
        print("Processing Dataset 4...")
        # Add your dataset 4 preprocessing code here

        print("Running the model for Dataset 4...")
        with open("result4.txt", "w") as f:
            f.write("Results for Dataset 4")

    elif option == 5:
        # Code for dataset 5 preprocessing and model execution
        print("Processing Dataset 5...")
        # Add your dataset 5 preprocessing code here

        print("Running the model for Dataset 5...")
        with open("result5.txt", "w") as f:
            f.write("Results for Dataset 5")

    elif option == 6:
        # Code for dataset 6 preprocessing and model execution
        print("Processing Dataset 6...")
        # Add your dataset 6 preprocessing code here

        print("Running the model for Dataset 6...")
        with open("result6.txt", "w") as f:
            f.write("Results for Dataset 6")

    else:
        print("Invalid option. Please select a number between 1 and 6.")

def display_menu():
    print("\nWelcome to the Dataset Selector!\n")
    print("Choose a dataset to process:")
    print("1. Dataset 1")
    print("2. Dataset 2")
    print("3. Dataset 3")
    print("4. Dataset 4")
    print("5. Dataset 5")
    print("6. Dataset 6")
    print("0. Exit")

if __name__ == "__main__":
    while True:
        display_menu()
        choice = int(input("Enter your choice (1-6) or 0 to exit: "))
        if choice == 0:
            print("Exiting the selector. Goodbye!")
            break
        preprocess_and_run(choice)










import os
import subprocess
from colorama import init, Fore, Style

# Initialize colorama for colorful terminal output
init(autoreset=True)

def run_notebook(option):
    # Dictionary mapping options to notebook paths and descriptions
    notebooks = {
        1: {"path": "notebook1.ipynb", "description": "Description of notebook 1"},
        2: {"path": "notebook2.ipynb", "description": "Description of notebook 2"},
        3: {"path": "notebook3.ipynb", "description": "Description of notebook 3"},
        4: {"path": "notebook4.ipynb", "description": "Description of notebook 4"},
        5: {"path": "notebook5.ipynb", "description": "Description of notebook 5"},
        6: {"path": "notebook6.ipynb", "description": "Description of notebook 6"}
    }

    # Validate option
    if option not in notebooks:
        print(Fore.RED + "Invalid option. Please choose a number between 1 and 6.")
        return
    
    notebook_to_run = notebooks[option]["path"]

    # Check if the notebook file exists
    if not os.path.exists(notebook_to_run):
        print(Fore.RED + f"Error: {notebook_to_run} not found!")
        return

    output_name = notebook_to_run.replace('.ipynb', '_output.ipynb')

    # Command to run the notebook and save the output
    command = [
        'jupyter', 'nbconvert',
        '--to', 'notebook',
        '--execute',
        '--output', output_name,
        '--allow-errors',  # Continue executing even if there are errors
        notebook_to_run
    ]

    try:
        print(Fore.YELLOW + f"Running {notebook_to_run} and saving output to {output_name}...")
        
        # Run the command to execute the notebook
        result = subprocess.run(command, capture_output=True, text=True)

        if result.returncode == 0:
            print(Fore.GREEN + f"{notebook_to_run} ran successfully! Output saved to {output_name}.")
        else:
            print(Fore.RED + f"Error running {notebook_to_run}:\n{result.stderr}")
    except Exception as e:
        print(Fore.RED + f"Error executing {notebook_to_run}: {e}")

def display_menu():
    print(Style.BRIGHT + Fore.CYAN + "\nWelcome to the Jupyter Notebook Selector!\n")
    print(Style.BRIGHT + Fore.BLUE + "Choose a notebook to run:")
    
    # Display options with descriptions
    print(Fore.GREEN + "1. Run notebook1.ipynb (Description: Data Cleaning)")
    print(Fore.GREEN + "2. Run notebook2.ipynb (Description: Data Analysis)")
    print(Fore.GREEN + "3. Run notebook3.ipynb (Description: Model Training)")
    print(Fore.GREEN + "4. Run notebook4.ipynb (Description: Model Evaluation)")
    print(Fore.GREEN + "5. Run notebook5.ipynb (Description: Data Visualization)")
    print(Fore.GREEN + "6. Run notebook6.ipynb (Description: Report Generation)")
    print(Fore.MAGENTA + "\nNote: You can run any of the notebooks by selecting its number.\n")

if __name__ == "__main__":
    while True:
        display_menu()
        try:
            choice = int(input(Fore.CYAN + "Enter your choice (1-6) or 0 to exit: "))
            if choice == 0:
                print(Fore.YELLOW + "Exiting the notebook selector. Goodbye!")
                break
            run_notebook(choice)
        except ValueError:
            print(Fore.RED + "Invalid input. Please enter a valid number between 1 and 6.")














import os
import subprocess

def run_notebook(notebook_name):
    # Define the output notebook name
    output_name = notebook_name.replace('.ipynb', '_output.ipynb')
    
    # Command to execute the notebook and save the output
    command = [
        'jupyter', 'nbconvert', 
        '--to', 'notebook', 
        '--execute', 
        notebook_name, 
        '--output', output_name,
        '--allow-errors'  # This allows the notebook to continue execution despite errors
    ]
    
    # Run the command
    result = subprocess.run(command, capture_output=True, text=True)
    
    if result.returncode == 0:
        print(f"Successfully executed {notebook_name}. Output saved to {output_name}.")
    else:
        print(f"Error executing {notebook_name}:\n{result.stderr}")

def display_menu():
    print("\nChoose a Jupyter Notebook to run:")
    print("1. Run file1.ipynb")
    print("2. Run file2.ipynb")
    print("3. Run file3.ipynb")
    print("4. Run file4.ipynb")
    print("5. Run file5.ipynb")
    print("6. Run file6.ipynb")
    print("0. Exit")

if __name__ == "__main__":
    while True:
        display_menu()
        choice = input("Enter your choice (0-6): ")
        
        if choice == '0':
            print("Exiting the notebook runner. Goodbye!")
            break
        
        notebook_files = {
            '1': 'file1.ipynb',
            '2': 'file2.ipynb',
            '3': 'file3.ipynb',
            '4': 'file4.ipynb',
            '5': 'file5.ipynb',
            '6': 'file6.ipynb'
        }
        
        # Check if choice is valid
        if choice in notebook_files:
            run_notebook(notebook_files[choice])
        else:
            print("Invalid choice. Please enter a number between 0 and 6.")









import os

def run_script(option):
    # Dictionary mapping options to file paths
    scripts = {
        1: "file1.py",
        2: "file2.ipynb",
        3: "file3.py",
        4: "file4.ipynb",
        5: "file5.py",
        6: "file6.ipynb"
    }

    # Validate option
    if option not in scripts:
        print("Invalid option. Please choose a number between 1 and 6.")
        return
    
    script_to_run = scripts[option]

    # Check if it's a .py or .ipynb file
    if script_to_run.endswith('.py'):
        try:
            # Open and execute the Python script
            with open(script_to_run, 'r') as file:
                exec(file.read())
            print(f"{script_to_run} ran successfully!")
        except FileNotFoundError:
            print(f"Error: {script_to_run} not found!")
        except Exception as e:
            print(f"Error running {script_to_run}: {e}")
    elif script_to_run.endswith('.ipynb'):
        try:
            print(f"Running {script_to_run} as a Jupyter Notebook...")
            os.system(f'jupyter nbconvert --to notebook --execute {script_to_run} --output {script_to_run}')
            print(f"{script_to_run} ran successfully!")
        except Exception as e:
            print(f"Error running {script_to_run}: {e}")

def display_menu():
    print("\nChoose a script to run:")
    print("1. Run file1.py")
    print("2. Run file2.ipynb")
    print("3. Run file3.py")
    print("4. Run file4.ipynb")
    print("5. Run file5.py")
    print("6. Run file6.ipynb")

if __name__ == "__main__":
    while True:
        display_menu()
        try:
            choice = int(input("Enter your choice (1-6) or 0 to exit: "))
            if choice == 0:
                print("Exiting. Goodbye!")
                break
            run_script(choice)
        except ValueError:
            print("Invalid input. Please enter a valid number.")










umm import subprocess
import os
from colorama import init, Fore, Style

# Initialize colorama for colorful terminal output
init(autoreset=True)

def run_script(option):
    # Dictionary mapping options to file paths and descriptions
    scripts = {
        1: {"path": "file1.py", "description": "Description of script 1"},
        2: {"path": "file2.py", "description": "Description of script 2"},
        3: {"path": "file3.py", "description": "Description of script 3"},
        4: {"path": "file4.py", "description": "Description of script 4"},
        5: {"path": "file5.py", "description": "Description of script 5"},
        6: {"path": "file6.py", "description": "Description of script 6"}
    }

    # Validate option
    if option not in scripts:
        print(Fore.RED + "Invalid option. Please choose a number between 1 and 6.")
        return
    
    script_to_run = scripts[option]["path"]
    output_file = f"{os.path.splitext(script_to_run)[0]}_output.txt"  # Name output file

    # Check if the script file exists
    if not os.path.exists(script_to_run):
        print(Fore.RED + f"Error: {script_to_run} not found!")
        return

    try:
        print(Fore.YELLOW + f"Running {script_to_run}...")

        # Run the script and capture output in a text file
        with open(output_file, 'w') as f:
            process = subprocess.run(["python", script_to_run], stdout=f, stderr=subprocess.STDOUT, text=True)
        
        print(Fore.GREEN + f"{script_to_run} ran successfully! Output saved to {output_file}")
    except Exception as e:
        print(Fore.RED + f"Error running {script_to_run}: {e}")

def display_menu():
    print(Style.BRIGHT + Fore.CYAN + "\nWelcome to the Python Script Selector!\n")
    print(Style.BRIGHT + Fore.BLUE + "Choose a script to run:")
    
    # Display options with descriptions
    print(Fore.GREEN + "1. Run file1.py (Description: Data Cleaning)")
    print(Fore.GREEN + "2. Run file2.py (Description: Data Analysis)")
    print(Fore.GREEN + "3. Run file3.py (Description: Model Training)")
    print(Fore.GREEN + "4. Run file4.py (Description: Model Evaluation)")
    print(Fore.GREEN + "5. Run file5.py (Description: Data Visualization)")
    print(Fore.GREEN + "6. Run file6.py (Description: Report Generation)")
    print(Fore.MAGENTA + "\nNote: You can run any of the scripts by selecting its number.\n")

if __name__ == "__main__":
    while True:
        display_menu()
        try:
            choice = int(input(Fore.CYAN + "Enter your choice (1-6) or 0 to exit: "))
            if choice == 0:
                print(Fore.YELLOW + "Exiting the script selector. Goodbye!")
                break
            run_script(choice)
        except ValueError:
            print(Fore.RED + "Invalid input. Please enter a valid number between 1 and 6.")




















import subprocess
import os
from colorama import init, Fore, Style

# Initialize colorama for colorful terminal output
init(autoreset=True)

def run_script(option):
    # Dictionary mapping options to file paths and descriptions
    scripts = {
        1: {"path": "file1.py", "description": "Description of script 1"},
        2: {"path": "file2.py", "description": "Description of script 2"},
        3: {"path": "file3.py", "description": "Description of script 3"},
        4: {"path": "file4.py", "description": "Description of script 4"},
        5: {"path": "file5.py", "description": "Description of script 5"},
        6: {"path": "file6.py", "description": "Description of script 6"}
    }

    # Validate option
    if option not in scripts:
        print(Fore.RED + "Invalid option. Please choose a number between 1 and 6.")
        return
    
    script_to_run = scripts[option]["path"]

    # Check if the script file exists
    if not os.path.exists(script_to_run):
        print(Fore.RED + f"Error: {script_to_run} not found!")
        return

    try:
        print(Fore.YELLOW + f"Running {script_to_run}...")
        subprocess.run(["python", script_to_run])
        print(Fore.GREEN + f"{script_to_run} ran successfully!")
    except Exception as e:
        print(Fore.RED + f"Error running {script_to_run}: {e}")

def display_menu():
    print(Style.BRIGHT + Fore.CYAN + "\nWelcome to the Python Script Selector!\n")
    print(Style.BRIGHT + Fore.BLUE + "Choose a script to run:")
    
    # Display options with descriptions
    print(Fore.GREEN + "1. Run file1.py (Description: Data Cleaning)")
    print(Fore.GREEN + "2. Run file2.py (Description: Data Analysis)")
    print(Fore.GREEN + "3. Run file3.py (Description: Model Training)")
    print(Fore.GREEN + "4. Run file4.py (Description: Model Evaluation)")
    print(Fore.GREEN + "5. Run file5.py (Description: Data Visualization)")
    print(Fore.GREEN + "6. Run file6.py (Description: Report Generation)")
    print(Fore.MAGENTA + "\nNote: You can run any of the scripts by selecting its number.\n")

if __name__ == "__main__":
    while True:
        display_menu()
        try:
            choice = int(input(Fore.CYAN + "Enter your choice (1-6) or 0 to exit: "))
            if choice == 0:
                print(Fore.YELLOW + "Exiting the script selector. Goodbye!")
                break
            run_script(choice)
        except ValueError:
            print(Fore.RED + "Invalid input. Please enter a valid number between 1 and 6.")












import subprocess
import os
from colorama import init, Fore, Style

# Initialize colorama for colorful terminal output
init(autoreset=True)

def run_notebook(option):
    # Dictionary mapping options to notebook paths and descriptions
    notebooks = {
        1: {"path": "notebook1.ipynb", "description": "Description of notebook 1"},
        2: {"path": "notebook2.ipynb", "description": "Description of notebook 2"},
        3: {"path": "notebook3.ipynb", "description": "Description of notebook 3"},
        4: {"path": "notebook4.ipynb", "description": "Description of notebook 4"},
        5: {"path": "notebook5.ipynb", "description": "Description of notebook 5"},
        6: {"path": "notebook6.ipynb", "description": "Description of notebook 6"}
    }

    # Validate option
    if option not in notebooks:
        print(Fore.RED + "Invalid option. Please choose a number between 1 and 6.")
        return
    
    notebook_to_run = notebooks[option]["path"]

    # Check if the notebook file exists
    if not os.path.exists(notebook_to_run):
        print(Fore.RED + f"Error: {notebook_to_run} not found!")
        return

    try:
        print(Fore.YELLOW + f"Opening {notebook_to_run} in Jupyter Notebook...")
        
        # Use subprocess to open the notebook with Jupyter in a browser
        subprocess.run(["jupyter", "notebook", notebook_to_run])

        print(Fore.GREEN + f"{notebook_to_run} opened successfully!")
    except Exception as e:
        print(Fore.RED + f"Error opening {notebook_to_run}: {e}")

def display_menu():
    print(Style.BRIGHT + Fore.CYAN + "\nWelcome to the Jupyter Notebook Selector!\n")
    print(Style.BRIGHT + Fore.BLUE + "Choose a notebook to open:")
    
    # Display options with descriptions
    print(Fore.GREEN + "1. Open notebook1.ipynb (Description: Data Cleaning)")
    print(Fore.GREEN + "2. Open notebook2.ipynb (Description: Data Analysis)")
    print(Fore.GREEN + "3. Open notebook3.ipynb (Description: Model Training)")
    print(Fore.GREEN + "4. Open notebook4.ipynb (Description: Model Evaluation)")
    print(Fore.GREEN + "5. Open notebook5.ipynb (Description: Data Visualization)")
    print(Fore.GREEN + "6. Open notebook6.ipynb (Description: Report Generation)")
    print(Fore.MAGENTA + "\nNote: You can open any of the notebooks by selecting its number.\n")

if __name__ == "__main__":
    while True:
        display_menu()
        try:
            choice = int(input(Fore.CYAN + "Enter your choice (1-6) or 0 to exit: "))
            if choice == 0:
                print(Fore.YELLOW + "Exiting the notebook selector. Goodbye!")
                break
            run_notebook(choice)
        except ValueError:
            print(Fore.RED + "Invalid input. Please enter a valid number between 1 and 6.")
